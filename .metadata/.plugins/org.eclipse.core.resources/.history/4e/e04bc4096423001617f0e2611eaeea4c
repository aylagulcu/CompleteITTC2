import java.util.ArrayList;

public class EuclideanDistanceEvaluator {
	
	ArrayList<Double> initialPointsDistances; // the minimum distance from the points agg is found
	ArrayList<Double> finalPointsDistances; // the minimum distance from the points agg is found
	final double INFINITY= 5000;
	
	double minPAllRuns, minRAllRuns;
	boolean normalize= true;

	public void compute(ArrayList<double[]> agg, ArrayList<double[]> init, ArrayList<double[]> fin, double minPenalty, double minRobustness, double maxPenalty, double maxRobustness) {
		// find the minimum distace of each point in init from each point in agg is found:
		double minDistance, distance;
		
		// compute each solution's distance in init from each solution in agg, and then take the minimum
		initialPointsDistances= new ArrayList<Double>();
		for (int i=0; i< init.size(); i++){
			// compute this point's min distance:
			minDistance= INFINITY;
			for (int j=0; j< agg.size(); j++){
				distance= computeDistance(init.get(i), agg.get(j), minPenalty, minRobustness, maxPenalty, maxRobustness);
				if (distance < minDistance)
					minDistance= distance;
			} // end i for
			initialPointsDistances.add(minDistance);
		} // end i for
		
		// compute each solution's distance in fin from each solution in agg, and then take the minimum
		finalPointsDistances= new ArrayList<Double>();
		for (int i=0; i< fin.size(); i++){
			// compute this point's min distance:
			minDistance= INFINITY;
			for (int j=0; j< agg.size(); j++){
				distance= computeDistance(fin.get(i), agg.get(j), minPenalty, minRobustness, maxPenalty, maxRobustness);
				if (distance < minDistance)
					minDistance= distance;
			} // end i for
			finalPointsDistances.add(minDistance);
		} // end i for
		
	}

	private double computeDistance(double[] point1, double[] point2, double Pmin, double Rmin, double Pmax, double Rmax) {
		if (normalize){
			return Math.sqrt(
					Math.pow(((point2[0]-point1[0]) / (Pmax - Pmin)), 2) + Math.pow(((point2[1]-point1[1]) / (Rmax - Rmin)) ,2));
		}
		return Math.sqrt(
				Math.pow((point2[0]-point1[0]), 2) + Math.pow((point2[1]-point1[1]) ,2));
	}
	
	public double getInitialDistanceStDev() {
		if (initialPointsDistances.size()== 0)
			return INFINITY;

		double mean= this.getInitialAvgDistance();
		double sumDiff= 0;
		for (double d: initialPointsDistances)
			sumDiff+= Math.pow(d-mean, 2);
		
		return Math.sqrt(( sumDiff / (initialPointsDistances.size()-1));
	}
	
	public double getInitialMinDistance() {
		if (initialPointsDistances.size()== 0)
			return INFINITY;
		double minDistance= initialPointsDistances.get(0);
		for (double d: initialPointsDistances)
			if (d< minDistance)
				minDistance= d;
			
		return minDistance;
	}

	public double getInitialAvgDistance() {
		if (initialPointsDistances.size()== 0)
			return INFINITY;
		double totalDistance= 0; 
		for (double d: initialPointsDistances)
			totalDistance+= d;
		return (totalDistance / initialPointsDistances.size());
	}
	
	public double getFinalDistanceStDev() {
		if (finalPointsDistances.size()== 0)
			return INFINITY;

		double mean= this.getFinalAvgDistance();
		double sumDiff= 0;
		for (double d: finalPointsDistances)
			sumDiff+= Math.pow(d-mean, 2);
		
		return Math.sqrt(sumDiff) / (finalPointsDistances.size()-1);
	}

	public double getFinalMinDistance() {
		if (finalPointsDistances.size()== 0)
			return INFINITY;
		double minDistance= finalPointsDistances.get(0);
		for (double d: finalPointsDistances)
			if (d< minDistance)
				minDistance= d;
			
		return minDistance;
	}

	public double getFinalAvgDistance() {
		if (finalPointsDistances.size()== 0)
			return INFINITY;
		double totalDistance= 0; 
		for (double d: finalPointsDistances)
			totalDistance+= d;
		return (totalDistance / finalPointsDistances.size());
	}

	public double getInitGD() {
		if (initialPointsDistances.size()== 0)
			return INFINITY;
		double total= 0;
		for (double d: initialPointsDistances)
			total+= (d*d);
		return ( Math.sqrt(total) / initialPointsDistances.size());
	}

	public double getFinalGD() {
		if (finalPointsDistances.size()== 0)
			return INFINITY;
		double total= 0;
		for (double d: finalPointsDistances)
			total+= (d*d);
		return ( Math.sqrt(total) / finalPointsDistances.size());
	}

	
	
}
	
//	public void compute( ArrayList<double[]> fin, ArrayList<double[]> init, double minPenalty, double minRobustness, double maxPenalty, double maxRobustness) {
//		initialPointsDistances= new ArrayList<Double>();
//		finalPointsDistances= new ArrayList<Double>();
//		
//		double total= 0;
//		for (double[] point: init){
//			total= 0;
//			if (normalize){
//				total+= Math.pow(((point[0]- minPenalty) / (maxPenalty - minPenalty)), 2);
//				total+= Math.pow(((point[1]- minRobustness) / (maxRobustness - minRobustness)), 2);
//			}
//			else{
//				total+= Math.pow((point[0]- minPenalty), 2);
//				total+= Math.pow((point[1]- minRobustness), 2);
//			}
//			initialPointsDistances.add(Math.sqrt(total));
//		} // end for each
//		
//		for (double[] point: fin){
//			total= 0;
//			if (normalize){
//				total+= Math.pow(((point[0]- minPenalty) / (maxPenalty - minPenalty)), 2);
//				total+= Math.pow(((point[1]- minRobustness) / (maxRobustness - minRobustness)), 2);
//			}
//			else{
//				total+= Math.pow((point[0]- minPenalty), 2);
//				total+= Math.pow((point[1]- minRobustness), 2);
//			}
//			finalPointsDistances.add(Math.sqrt(total));
//		} // end for each
//		
//	}
//

